{
  "info": {
    "_postman_id": "f2eecccb-dd19-4e9a-9e06-520b013580d1",
    "name": "WIWB1 Baseline API Tests",
    "description": "Generated Postman collection for WIWB API testing. Uses Postman's built-in OAuth 2.0 authorization. Make sure to set your client_id and client_secret in the collection variables.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "auto-generated"
  },
  "item": [
    {
      "name": "Valid request for P",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"06260\"\n        ],\n        \"VariableCodes\": [\n          \"P\"\n        ],\n        \"StartDate\": \"20240620000000\",\n        \"EndDate\": \"20240620010000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response body contains 'Data'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Data');",
              "});",
              "",
              "pm.test(\"Response body contains 'Meta'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Meta');",
              "});",
              "",
              "pm.test(\"Response body contains 'StructureType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('StructureType');",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "get all locations for aws",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/locations/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "locations",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"DataSourceCodes\": [\n    \"Knmi.AwsTenMinutes\"\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Locations'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Locations');",
              "});",
              "",
              "pm.test(\"Response body contains 'Projections'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Projections');",
              "});",
              "",
              "pm.test(\"Response body contains 'DataSourceGroups'\", function () {",
              "    pm.expect(pm.response.text()).to.include('DataSourceGroups');",
              "});",
              "",
              "pm.test(\"Response body contains 'TagTypes'\", function () {",
              "    pm.expect(pm.response.text()).to.include('TagTypes');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Missing VariableCodes",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"06260\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250527000000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 500\", function () {",
              "    pm.response.to.have.status(500);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'ClientType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('ClientType');",
              "});",
              "",
              "pm.test(\"Response body contains 'Exception'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Exception');",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "TMP only with CSV export",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "description": "hydronet.csv.simple will return an actual csv file but hydronet.csv will return a file containing multiple csv's in one file, see parsing logic in ",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"260\"\n        ],\n        \"VariableCodes\": [\n          \"TMP\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250527000000\"\n      }\n    }\n  ],\n  \"Exporter\": {\n    \"DataFormatCode\": \"hydronet.csv\",\n    \"Settings\": {\n      \"Formatting\": \"Default\"\n    }\n  }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test script skipped for special response type: <csv>",
              "// Postman cannot validate binary/special format responses like <csv>",
              "",
              "// Only basic status code check is performed",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Synoptic Data - Historical",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.Synops\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"06260\"\n        ],\n        \"VariableCodes\": [\n          \"P\",\n          \"TMP\",\n          \"RH\"\n        ],\n        \"StartDate\": \"20240101000000\",\n        \"EndDate\": \"20240101040000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Data'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Data');",
              "});",
              "",
              "pm.test(\"Response body contains 'Meta'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Meta');",
              "});",
              "",
              "pm.test(\"Response body contains 'StructureType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('StructureType');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Data Sources",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/datasources/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "datasources",
            "get"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'DataSources'\", function () {",
              "    pm.expect(pm.response.text()).to.include('DataSources');",
              "});",
              "",
              "pm.test(\"Response body contains 'Assemblies'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Assemblies');",
              "});",
              "",
              "pm.test(\"Response body contains 'DataSourceGroups'\", function () {",
              "    pm.expect(pm.response.text()).to.include('DataSourceGroups');",
              "});",
              "",
              "pm.test(\"Response body contains 'TimeZoneOffset'\", function () {",
              "    pm.expect(pm.response.text()).to.include('TimeZoneOffset');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Get Specific Data Sources",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/datasources/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "datasources",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"DataSourceCodes\": [\n    \"Knmi.AwsTenMinutes\",\n    \"Knmi.Synops\"\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'DataSources'\", function () {",
              "    pm.expect(pm.response.text()).to.include('DataSources');",
              "});",
              "",
              "pm.test(\"Response body contains 'Assemblies'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Assemblies');",
              "});",
              "",
              "pm.test(\"Response body contains 'DataSourceGroups'\", function () {",
              "    pm.expect(pm.response.text()).to.include('DataSourceGroups');",
              "});",
              "",
              "pm.test(\"Response body contains 'TimeZoneOffset'\", function () {",
              "    pm.expect(pm.response.text()).to.include('TimeZoneOffset');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Get Variables for KNMI AWS",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/variables/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "variables",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"DataSourceCodes\": [\n    \"Knmi.AwsTenMinutes\"\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Variables'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Variables');",
              "});",
              "",
              "pm.test(\"Response body contains 'Units'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Units');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Get KNMI Station Locations",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/locations/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "locations",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"DataSourceCodes\": [\n    \"Knmi.AwsTenMinutes\"\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Locations'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Locations');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Multiple Locations Time Series",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"06260\",\n          \"06280\",\n          \"06370\"\n        ],\n        \"VariableCodes\": [\n          \"P\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250527000000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Data'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Data');",
              "});",
              "",
              "pm.test(\"Response body contains 'Meta'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Meta');",
              "});",
              "",
              "pm.test(\"Response body contains 'StructureType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('StructureType');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Invalid Data Source",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/datasources/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "datasources",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"DataSourceCodes\": [\n    \"nullxistent.DataSource\"\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'DataSources'\", function () {",
              "    pm.expect(pm.response.text()).to.include('DataSources');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Invalid Location Code",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "description": "invalid location code throws an error in wiwb1, which does not contain the actual invalid location code, just a general statement",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"999999\"\n        ],\n        \"VariableCodes\": [\n          \"P\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250527000000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 500\", function () {",
              "    pm.response.to.have.status(500);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Exception'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Exception');",
              "});",
              "",
              "pm.test(\"Response body contains 'ClientType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('ClientType');",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Invalid Variable Code",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "description": "invalid variable code throws an error in wiwb1, which does contain the actual invalid variable code",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"260\"\n        ],\n        \"VariableCodes\": [\n          \"INVALID_VAR\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250527000000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 500\", function () {",
              "    pm.response.to.have.status(500);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Exception'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Exception');",
              "});",
              "",
              "pm.test(\"Response body contains 'ClientType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('ClientType');",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Filter Variables by Codes",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/variables/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "variables",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"VariableCodes\": [\n    \"P\",\n    \"TMP\",\n    \"RH\",\n    \"WindSpeed\"\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Variables'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Variables');",
              "});",
              "",
              "pm.test(\"Response body contains 'Units'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Units');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Multi-Reader Request",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/timeseries/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "timeseries",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.AwsTenMinutes\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"06260\"\n        ],\n        \"VariableCodes\": [\n          \"P\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250526020000\"\n      }\n    },\n    {\n      \"DataSourceCode\": \"Knmi.Synops\",\n      \"Settings\": {\n        \"LocationCodes\": [\n          \"06260\"\n        ],\n        \"VariableCodes\": [\n          \"P\"\n        ],\n        \"StartDate\": \"20250526000000\",\n        \"EndDate\": \"20250526020000\"\n      }\n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'Data'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Data');",
              "});",
              "",
              "pm.test(\"Response body contains 'Meta'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Meta');",
              "});",
              "",
              "pm.test(\"Response body contains 'StructureType'\", function () {",
              "    pm.expect(pm.response.text()).to.include('StructureType');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Get Grid Definitions",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/entity/griddefinitions/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "entity",
            "griddefinitions",
            "get"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-generated test script from test case expectations",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test(\"Response body contains 'GridDefinitions'\", function () {",
              "    pm.expect(pm.response.text()).to.include('GridDefinitions');",
              "});",
              "",
              "pm.test(\"Response body contains 'Projections'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Projections');",
              "});",
              "",
              "pm.test(\"Response body contains 'Extents'\", function () {",
              "    pm.expect(pm.response.text()).to.include('Extents');",
              "});",
              "",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "});",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "KNMI Radar Composite - single GeoTIFF Download",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/grids/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "grids",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.International.Radar.Composite\",\n      \"Settings\": {\n        \"StartDate\": \"20250526120000\",\n        \"EndDate\": \"20250526120500\",\n        \"VariableCodes\": [\n          \"P\"\n        ]\n      }\n    }\n  ],\n  \"Exporter\": {\n    \"DataFormatCode\": \"geotiff\"\n  }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test script skipped for special response type: <geotiff>",
              "// Postman cannot validate binary/special format responses like <geotiff>",
              "",
              "// Only basic status code check is performed",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "KNMI Radar Composite - Single Zipped netcdf Download",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/grids/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "grids",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.International.Radar.Composite\",\n      \"Settings\": {\n        \"StartDate\": \"20250526120000\",\n        \"EndDate\": \"20250526120500\",\n        \"VariableCodes\": [\n          \"P\"\n        ]\n      }\n    }\n  ],\n  \"Exporter\": {\n    \"DataFormatCode\": \"netcdf4.cf1p6.zip\"\n  }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test script skipped for special response type: <zipfile>",
              "// Postman cannot validate binary/special format responses like <zipfile>",
              "",
              "// Only basic status code check is performed",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "KNMI Radar Composite - ZIP Download",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/grids/get",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "grids",
            "get"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Readers\": [\n    {\n      \"DataSourceCode\": \"Knmi.International.Radar.Composite\",\n      \"Settings\": {\n        \"StartDate\": \"20250526120000\",\n        \"EndDate\": \"20250526150500\",\n        \"VariableCodes\": [\n          \"P\"\n        ]\n      }\n    }\n  ],\n  \"Exporter\": {\n    \"DataFormatCode\": \"geotiff\"\n  }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test script skipped for special response type: <zipfile>",
              "// Postman cannot validate binary/special format responses like <zipfile>",
              "",
              "// Only basic status code check is performed",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://wiwb.hydronet.com",
      "type": "string"
    },
    {
      "key": "auth_url",
      "value": "https://login.hydronet.com/auth/realms/hydronet/protocol/openid-connect/token",
      "type": "string"
    },
    {
      "key": "client_id",
      "value": "YOUR_CLIENT_ID",
      "type": "string"
    },
    {
      "key": "client_secret",
      "value": "YOUR_CLIENT_SECRET",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": [
      {
        "key": "tokenName",
        "value": "WIWB Token",
        "type": "string"
      },
      {
        "key": "accessTokenUrl",
        "value": "{{auth_url}}",
        "type": "string"
      },
      {
        "key": "grant_type",
        "value": "client_credentials",
        "type": "string"
      },
      {
        "key": "clientId",
        "value": "{{client_id}}",
        "type": "string"
      },
      {
        "key": "clientSecret",
        "value": "{{client_secret}}",
        "type": "string"
      },
      {
        "key": "addTokenTo",
        "value": "header",
        "type": "string"
      },
      {
        "key": "headerPrefix",
        "value": "Bearer",
        "type": "string"
      },
      {
        "key": "client_authentication",
        "value": "body",
        "type": "string"
      }
    ]
  }
}